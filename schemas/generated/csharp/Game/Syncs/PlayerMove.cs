// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Game.Syncs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerMove : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PlayerMove GetRootAsPlayerMove(ByteBuffer _bb) { return GetRootAsPlayerMove(_bb, new PlayerMove()); }
  public static PlayerMove GetRootAsPlayerMove(ByteBuffer _bb, PlayerMove obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerMove __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Uid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Game.Common.Vec3? Pos { get { int o = __p.__offset(6); return o != 0 ? (Game.Common.Vec3?)(new Game.Common.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Game.Syncs.PlayerMove> CreatePlayerMove(FlatBufferBuilder builder,
      uint uid = 0,
      Offset<Game.Common.Vec3> posOffset = default(Offset<Game.Common.Vec3>)) {
    builder.StartTable(2);
    PlayerMove.AddPos(builder, posOffset);
    PlayerMove.AddUid(builder, uid);
    return PlayerMove.EndPlayerMove(builder);
  }

  public static void StartPlayerMove(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUid(FlatBufferBuilder builder, uint uid) { builder.AddUint(0, uid, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Game.Common.Vec3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static Offset<Game.Syncs.PlayerMove> EndPlayerMove(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Game.Syncs.PlayerMove>(o);
  }
}


static public class PlayerMoveVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Uid*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*Pos*/, Game.Common.Vec3Verify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
