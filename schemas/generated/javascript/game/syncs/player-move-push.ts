// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PlayerMove } from '../../game/syncs/player-move.js';


export class PlayerMovePush {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerMovePush {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerMovePush(bb:flatbuffers.ByteBuffer, obj?:PlayerMovePush):PlayerMovePush {
  return (obj || new PlayerMovePush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerMovePush(bb:flatbuffers.ByteBuffer, obj?:PlayerMovePush):PlayerMovePush {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerMovePush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playersPos(index: number, obj?:PlayerMove):PlayerMove|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PlayerMove()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersPosLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPlayerMovePush(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPlayersPos(builder:flatbuffers.Builder, playersPosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playersPosOffset, 0);
}

static createPlayersPosVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersPosVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPlayerMovePush(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerMovePush(builder:flatbuffers.Builder, playersPosOffset:flatbuffers.Offset):flatbuffers.Offset {
  PlayerMovePush.startPlayerMovePush(builder);
  PlayerMovePush.addPlayersPos(builder, playersPosOffset);
  return PlayerMovePush.endPlayerMovePush(builder);
}
}
