// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vec3 } from '../../game/common/vec3.js';


export class ProjectileData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProjectileData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProjectileData(bb:flatbuffers.ByteBuffer, obj?:ProjectileData):ProjectileData {
  return (obj || new ProjectileData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProjectileData(bb:flatbuffers.ByteBuffer, obj?:ProjectileData):ProjectileData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProjectileData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

direction(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

speed():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

lifeTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startProjectileData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDirection(builder:flatbuffers.Builder, directionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, directionOffset, 0);
}

static addSpeed(builder:flatbuffers.Builder, speed:number) {
  builder.addFieldFloat32(1, speed, 0.0);
}

static addLifeTime(builder:flatbuffers.Builder, lifeTime:number) {
  builder.addFieldFloat32(2, lifeTime, 0.0);
}

static endProjectileData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProjectileData(builder:flatbuffers.Builder, directionOffset:flatbuffers.Offset, speed:number, lifeTime:number):flatbuffers.Offset {
  ProjectileData.startProjectileData(builder);
  ProjectileData.addDirection(builder, directionOffset);
  ProjectileData.addSpeed(builder, speed);
  ProjectileData.addLifeTime(builder, lifeTime);
  return ProjectileData.endProjectileData(builder);
}
}
