// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SkillData, unionToSkillData, unionListToSkillData } from '../../game/syncs/skill-data.js';
import { SkillType } from '../../game/syncs/skill-type.js';


export class SkillSyncs {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SkillSyncs {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSkillSyncs(bb:flatbuffers.ByteBuffer, obj?:SkillSyncs):SkillSyncs {
  return (obj || new SkillSyncs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSkillSyncs(bb:flatbuffers.ByteBuffer, obj?:SkillSyncs):SkillSyncs {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SkillSyncs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

attackerId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

targetId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

skillType():SkillType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SkillType.Projectile;
}

skillDataType():SkillData {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SkillData.NONE;
}

skillData<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startSkillSyncs(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addAttackerId(builder:flatbuffers.Builder, attackerId:number) {
  builder.addFieldInt32(0, attackerId, 0);
}

static addTargetId(builder:flatbuffers.Builder, targetId:number) {
  builder.addFieldInt32(1, targetId, 0);
}

static addSkillType(builder:flatbuffers.Builder, skillType:SkillType) {
  builder.addFieldInt8(2, skillType, SkillType.Projectile);
}

static addSkillDataType(builder:flatbuffers.Builder, skillDataType:SkillData) {
  builder.addFieldInt8(3, skillDataType, SkillData.NONE);
}

static addSkillData(builder:flatbuffers.Builder, skillDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, skillDataOffset, 0);
}

static endSkillSyncs(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSkillSyncsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSkillSyncsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createSkillSyncs(builder:flatbuffers.Builder, attackerId:number, targetId:number, skillType:SkillType, skillDataType:SkillData, skillDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  SkillSyncs.startSkillSyncs(builder);
  SkillSyncs.addAttackerId(builder, attackerId);
  SkillSyncs.addTargetId(builder, targetId);
  SkillSyncs.addSkillType(builder, skillType);
  SkillSyncs.addSkillDataType(builder, skillDataType);
  SkillSyncs.addSkillData(builder, skillDataOffset);
  return SkillSyncs.endSkillSyncs(builder);
}
}
