// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class PlayerStateSyncs {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerStateSyncs {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerStateSyncs(bb:flatbuffers.ByteBuffer, obj?:PlayerStateSyncs):PlayerStateSyncs {
  return (obj || new PlayerStateSyncs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerStateSyncs(bb:flatbuffers.ByteBuffer, obj?:PlayerStateSyncs):PlayerStateSyncs {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerStateSyncs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uid():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

state():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

level():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hp():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startPlayerStateSyncs(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUid(builder:flatbuffers.Builder, uid:number) {
  builder.addFieldInt32(0, uid, 0);
}

static addState(builder:flatbuffers.Builder, state:number) {
  builder.addFieldInt32(1, state, 0);
}

static addLevel(builder:flatbuffers.Builder, level:number) {
  builder.addFieldInt32(2, level, 0);
}

static addHp(builder:flatbuffers.Builder, hp:number) {
  builder.addFieldFloat32(3, hp, 0.0);
}

static endPlayerStateSyncs(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPlayerStateSyncsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedPlayerStateSyncsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createPlayerStateSyncs(builder:flatbuffers.Builder, uid:number, state:number, level:number, hp:number):flatbuffers.Offset {
  PlayerStateSyncs.startPlayerStateSyncs(builder);
  PlayerStateSyncs.addUid(builder, uid);
  PlayerStateSyncs.addState(builder, state);
  PlayerStateSyncs.addLevel(builder, level);
  PlayerStateSyncs.addHp(builder, hp);
  return PlayerStateSyncs.endPlayerStateSyncs(builder);
}
}
